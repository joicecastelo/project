# @Author: Rafael Direito
# @Date:   2022-10-05 17:01:12 (WEST)
# @Email:  rdireito@av.it.pt
# @Copyright: Insituto de Telecomunicações - Aveiro, Aveiro, Portugal
# @Last Modified by:   Rafael Direito
# @Last Modified time: 2022-10-21 16:38:05

# generated by datamodel-codegen:


from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import AnyUrl, BaseModel, Field


class NonNullModel(BaseModel):

    def dict(self, *args, **kwargs):
        if kwargs and kwargs.get("exclude_none") is not None:
            kwargs["exclude_none"] = True
            return BaseModel.dict(self, *args, **kwargs)


class Model(BaseModel):
    __root__: Any


class AnyModel(BaseModel):
    __root__: Any


class AttachmentRef(BaseModel):
    id: str = Field(..., description='Unique-Identifier for this attachment')
    href: Optional[str] = Field(
        None, description='URL serving as reference for the attachment'
        + 'resource'
    )
    description: Optional[str] = Field(
        None, description='A narrative text describing the content of the '
        + 'attachment'
    )
    name: Optional[str] = Field(
        None, description='Name of the relatedentity.'
    )
    url: Optional[str] = Field(
        None, description='Link to the attachment media/content'
    )
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )
    _referredType: Optional[str] = Field(
        None,
        alias='@referredType',
        description='The actual type of the target instance when needed for '
        + 'disambiguation.',
    )


class Characteristic(BaseModel):
    name: str = Field(..., description='Name of the characteristic')
    valueType: Optional[str] = Field(
        None, description='Data type of the value of the characteristic'
    )
    value: str = Field(..., description='The value of the characteristic')
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )

    class Config:
        orm_mode = True


class EntityRef(BaseModel):
    id: str = Field(..., description='Unique identifier of a related entity.')
    href: Optional[str] = Field(
        None,
        description='Reference of the related entity.'
        )
    name: Optional[str] = Field(
        None,
        description='Name of the related entity.'
        )
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )
    _referredType: Optional[str] = Field(
        None,
        alias='@referredType',
        description='The actual type of the target instance when needed for '
        + 'disambiguation.',
    )


class ExternalReference(BaseModel):
    externalReferenceType: Optional[str] = Field(
        None, description='Type of the external reference'
    )
    name: Optional[str] = Field(None, description='External reference name')
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )

    class Config:
        orm_mode = True


class IndividualStateType(Enum):
    initialized = 'initialized'
    validated = 'validated'
    deceaded = 'deceaded'


class MediumCharacteristic(BaseModel):
    city: Optional[str] = Field(None, description='The city')
    contactType: Optional[str] = Field(
        None,
        description='The type of contact, for example: phone number such as '
        + 'mobile, fixed home, fixed office. postal address such as shipping '
        + 'instalation…',
    )
    country: Optional[str] = Field(None, description='The country')
    emailAddress: Optional[str] = Field(
        None, description='Full email address in standard format'
    )
    faxNumber: Optional[str] = Field(
        None,
        description='The fax number of the contact'
        )
    phoneNumber: Optional[str] = Field(
        None, description='The primary phone number of the contact'
    )
    postCode: Optional[str] = Field(None, description='Postcode')
    socialNetworkId: Optional[str] = Field(
        None, description='Identifier as a member of a social network'
    )
    stateOrProvince: Optional[str] = Field(
        None,
        description='State or province'
    )
    street1: Optional[str] = Field(None, description='Describes the street')
    street2: Optional[str] = Field(
        None,
        description='Complementary street description'
    )
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )


class OrganizationRef(BaseModel):
    id: str = Field(..., description='Unique identifier of a related entity.')
    href: Optional[str] = Field(
        None,
        description='Reference of the related entity.'
    )
    name: Optional[str] = Field(
        None,
        description='Name of the related entity.'
    )
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )
    _referredType: Optional[str] = Field(
        None,
        alias='@referredType',
        description='The actual type of the target instance when needed for '
        + 'disambiguation.',
    )


class OrganizationStateType(Enum):
    initialized = 'initialized'
    validated = 'validated'
    closed = 'closed'


class Quantity(BaseModel):
    amount: Optional[float] = Field(
        1,
        description='Numeric value in a given unit'
        )
    units: Optional[str] = Field(None, description='Unit')


class RelatedParty(BaseModel):
    id: str = Field(..., description='Unique identifier of a related entity.')
    href: Optional[str] = Field(
        None,
        description='Reference of the related entity.'
        )
    name: Optional[str] = Field(
        None,
        description='Name of the related entity.'
        )
    role: Optional[str] = Field(
        None,
        description='Role played by the related party'
        )
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )
    _referredType: str = Field(
        ...,
        alias='@referredType',
        description='The actual type of the target instance when needed for '
        + 'disambiguation.',
    )

    class Config:
        orm_mode = True


class TaxDefinition(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Unique identifier of the tax.'
    )
    name: Optional[str] = Field(None, description='Tax name.')
    taxType: Optional[str] = Field(None, description='Type of  the tax.')
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )
    _referredType: Optional[str] = Field(
        None,
        alias='@referredType',
        description='The actual type of the target instance when needed for '
        + 'disambiguation.',
    )


class TimePeriod(BaseModel):
    endDateTime: Optional[datetime] = Field(
        None, description='End of the time period, using IETC-RFC-3339 format'
    )
    startDateTime: Optional[datetime] = Field(
        None,
        description='Start of the time period, using IETC-RFC-3339 format. If '
        + 'you define a start, you must also define an end',
    )

    class Config:
        orm_mode = True


class EventSubscription(BaseModel):
    id: str = Field(..., description='Id of the listener')
    callback: str = Field(..., description='The callback being registered.')
    query: Optional[str] = Field(
        None,
        description='additional data to be passed'
    )


class EventSubscriptionInput(BaseModel):
    callback: str = Field(..., description='The callback being registered.')
    query: Optional[str] = Field(
        None,
        description='additional data to be passed'
        )


class Error(BaseModel):
    code: str = Field(
        ...,
        description='Application relevant detail, defined in the API or a '
        + 'common list.',
    )
    reason: str = Field(
        ...,
        description='Explanation of the reason for the error which can be '
        + 'shown to a client user.',
    )
    message: Optional[str] = Field(
        None,
        description='More details and corrective actions related to the '
        + 'error which can be shown to a client user.',
    )
    status: Optional[str] = Field(
        None,
        description='HTTP Error code extension'
        )
    referenceError: Optional[AnyUrl] = Field(
        None, description='URI of documentation describing the error.'
    )
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class.',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity '
        + 'name.'
    )


class Attachment(BaseModel):
    id: Optional[str] = Field(
        None, description='Unique identifier for this particular attachment'
    )
    href: Optional[str] = Field(None, description='URI for this Attachment')
    attachmentType: Optional[str] = Field(
        None, description='Attachment type such as video, picture'
    )
    content: Optional[str] = Field(
        None,
        description='The actual contents of the attachment object, if '
        + 'embedded, encoded as base64',
    )
    description: Optional[str] = Field(
        None, description='A narrative text describing the content of the '
        + 'attachment'
    )
    mimeType: Optional[str] = Field(
        None,
        description='Attachment mime type such as extension file for video, '
        + 'picture and document',
    )
    name: Optional[str] = Field(None, description='The name of the attachment')
    url: Optional[str] = Field(
        None,
        description='Uniform Resource Locator, is a web page address (a '
        + 'subset of URI)',
    )
    size: Optional[Quantity] = Field(
        None,
        description='The size of the attachment.'
        )
    validFor: Optional[TimePeriod] = Field(
        None,
        description='The period of time for which the attachment is valid'
    )
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )


class AttachmentRefOrValue(BaseModel):
    id: Optional[str] = Field(
        None, description='Unique identifier for this particular attachment'
    )
    href: Optional[str] = Field(None, description='URI for this Attachment')
    attachmentType: Optional[str] = Field(
        None, description='Attachment type such as video, picture'
    )
    content: Optional[str] = Field(
        None,
        description='The actual contents of the attachment object, if '
        + 'embedded, encoded as base64',
    )
    description: Optional[str] = Field(
        None,
        description='A narrative text describing the content of the attachment'
    )
    mimeType: Optional[str] = Field(
        None,
        description='Attachment mime type such as extension file for video,'
        + ' picture and document',
    )
    name: Optional[str] = Field(None, description='The name of the attachment')
    url: Optional[str] = Field(
        None,
        description='Uniform Resource Locator, is a web page address (a '
        + 'subset of URI)',
    )
    size: Optional[Quantity] = Field(
        None,
        description='The size of the attachment.'
    )
    validFor: Optional[TimePeriod] = Field(
        None,
        description='The period of time for which the attachment is valid'
    )
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )
    _referredType: Optional[str] = Field(
        None,
        alias='@referredType',
        description='The actual type of the target instance when needed for '
        + 'disambiguation.',
    )


class ContactMedium(BaseModel):
    mediumType: Optional[str] = Field(
        None,
        description='Type of the contact medium, such as: email address, '
        + 'telephone number, postal address',
    )
    preferred: Optional[bool] = Field(
        None,
        description='If true, indicates that is the preferred contact medium'
    )
    characteristic: Optional[MediumCharacteristic] = Field(
        None,
        description='Any additional characteristic(s) of this contact medium'
    )
    validFor: Optional[TimePeriod] = Field(
        None,
        description='The time period that the contact medium is valid for'
    )
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )

    class Config:
        orm_mode = True


class Disability(BaseModel):
    disabilityCode: Optional[str] = Field(
        None,
        description='Code of the disability'
    )
    disabilityName: Optional[str] = Field(
        None,
        description='Name of the disability'
    )
    validFor: Optional[TimePeriod] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )


class IndividualIdentification(BaseModel):
    identificationId: Optional[str] = Field(None, description='Identifier')
    identificationType: Optional[str] = Field(
        None,
        description='Identification type (passport, national identity card, '
        + 'drivers license, social security number, birth certificate)',
    )
    issuingAuthority: Optional[str] = Field(
        None,
        description='Authority which has issued the identifier, such as: '
        + 'social security, town hall',
    )
    issuingDate: Optional[datetime] = Field(
        None, description='Date at which the identifier was issued'
    )
    attachment: Optional[AttachmentRefOrValue] = None
    validFor: Optional[TimePeriod] = Field(
        None,
        description='The period for which the identification information is '
        + 'valid.',
    )
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )


class LanguageAbility(BaseModel):
    isFavouriteLanguage: Optional[bool] = Field(
        None,
        description='A “true” value specifies whether the language is '
        + 'considered by the individual as his favourite one',
    )
    languageCode: Optional[str] = Field(
        None,
        description='Language code (RFC 5646)'
    )
    languageName: Optional[str] = Field(None, description='Language name')
    listeningProficiency: Optional[str] = Field(
        None, description='Listening proficiency evaluated for this language'
    )
    readingProficiency: Optional[str] = Field(
        None, description='Reading proficiency evaluated for this language'
    )
    speakingProficiency: Optional[str] = Field(
        None, description='Speaking proficiency evaluated for this language'
    )
    writingProficiency: Optional[str] = Field(
        None, description='Writing proficiency evaluated for this language'
    )
    validFor: Optional[TimePeriod] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )


class OrganizationChildRelationship(BaseModel):
    relationshipType: Optional[str] = Field(
        None,
        description='Type of the relationship. Could be juridical, '
        + 'hierarchical, geographical, functional for example.',
    )
    organization: Optional[OrganizationRef] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )

    class Config:
        orm_mode = True


class OrganizationIdentification(BaseModel):
    identificationId: Optional[str] = Field(None, description='Identifier')
    identificationType: Optional[str] = Field(
        None,
        description='Type of identification information used to identify '
        + 'the company in a country or internationally',
    )
    issuingAuthority: Optional[str] = Field(
        None,
        description='Authority which has issued the identifier (chamber of '
        + 'commerce...)',
    )
    issuingDate: Optional[datetime] = Field(
        None, description='Date at which the identifier was issued'
    )
    attachment: Optional[AttachmentRefOrValue] = None
    validFor: Optional[TimePeriod] = Field(
        None,
        description='The period for which the identification information '
        + 'is valid.',
    )
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )

    class Config:
        orm_mode = True


class OrganizationParentRelationship(BaseModel):
    relationshipType: Optional[str] = Field(
        None,
        description='Type of the relationship. Could be juridical, '
        + 'hierarchical, geographical, functional for example.',
    )
    organization: Optional[OrganizationRef] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )

    class Config:
        orm_mode = True


class OtherNameIndividual(BaseModel):
    aristocraticTitle: Optional[str] = Field(
        None, description='e.g. Baron, Graf, Earl,…'
    )
    familyName: Optional[str] = Field(
        None,
        description='Contains the non-chosen or inherited name. Also known as '
        + 'last name in the Western context',
    )
    familyNamePrefix: Optional[str] = Field(
        None,
        description='Family name prefix'
    )
    formattedName: Optional[str] = Field(
        None,
        description='. A fully formatted name in one string with all of its '
        + 'pieces in their proper place and all of the necessary punctuation. '
        + 'Useful for specific contexts (Chinese, Japanese, Korean,…)',
    )
    fullName: Optional[str] = Field(
        None, description='Full name flatten (first, middle, and last names)'
    )
    generation: Optional[str] = Field(None, description='e.g. Sr, Jr…')
    givenName: Optional[str] = Field(None, description='First name')
    legalName: Optional[str] = Field(
        None,
        description='Legal name or birth name (name one has for official '
        + 'purposes)',
    )
    middleName: Optional[str] = Field(
        None,
        description='Middle name or initial'
    )
    preferredGivenName: Optional[str] = Field(
        None,
        description='Contains the chosen name by which the person prefers to '
        + 'be addressed. Note: This name may be a name other than a given '
        + 'name, such as a nickname',
    )
    title: Optional[str] = Field(
        None, description='Use for titles (aristrocatic, social, ...): Pr, '
        + 'Dr, Sir,....'
    )
    validFor: Optional[TimePeriod] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )


class OtherNameOrganization(BaseModel):
    name: Optional[str] = Field(
        None, description='Organization name (department name for example)'
    )
    nameType: Optional[str] = Field(
        None, description='Co. , Inc. , Ltd. , Pty Ltd. , Plc; , Gmbh'
    )
    tradingName: Optional[str] = Field(
        None, description='The name that the organization trades under'
    )
    validFor: Optional[TimePeriod] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )

    class Config:
        orm_mode = True


class PartyCreditProfile(BaseModel):
    creditAgencyName: Optional[str] = Field(
        None, description='Name of the credit agency giving the score'
    )
    creditAgencyType: Optional[str] = Field(
        None, description='Type of the credit agency giving the score'
    )
    ratingReference: Optional[str] = Field(
        None, description='Reference corresponding to the credit rating'
    )
    ratingScore: Optional[int] = Field(
        None,
        description='A measure of a party’s creditworthiness calculated on '
        + 'the basis of a combination of factors such as their income and '
        + 'credit history',
    )
    validFor: Optional[TimePeriod] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )

    class Config:
        orm_mode = True


class Skill(BaseModel):
    comment: Optional[str] = Field(
        None, description='A free text comment linked to the evaluation done'
    )
    evaluatedLevel: Optional[str] = Field(
        None,
        description='Level of expertise in a skill evaluated for an individual'
    )
    skillCode: Optional[str] = Field(None, description='Code of the skill')
    skillName: Optional[str] = Field(
        None, description='Name of the skill such as Java language,…'
    )
    validFor: Optional[TimePeriod] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )


class TaxExemptionCertificate(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Unique identifier of the certificate of the tax exemption'
    )
    attachment: Optional[AttachmentRefOrValue] = None
    taxDefinition: Optional[List[TaxDefinition]] = None
    validFor: Optional[TimePeriod] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )

    class Config:
        orm_mode = True


class Individual(BaseModel):
    id: str = Field(..., description='Unique identifier of the organization')
    href: Optional[str] = Field(
        None, description='Hyperlink to access the organization'
    )
    aristocraticTitle: Optional[str] = Field(
        None, description='e.g. Baron, Graf, Earl,…'
    )
    birthDate: Optional[datetime] = Field(None, description='Birth date')
    countryOfBirth: Optional[str] = Field(
        None, description='Country where the individual was born'
    )
    deathDate: Optional[datetime] = Field(None, description='Date of death')
    familyName: Optional[str] = Field(
        None,
        description='Contains the non-chosen or inherited name. Also known as '
        + 'last name in the Western context',
    )
    familyNamePrefix: Optional[str] = Field(
        None,
        description='Family name prefix'
    )
    formattedName: Optional[str] = Field(
        None,
        description='A fully formatted name in one string with all of its '
        + 'pieces in their proper place and all of the necessary punctuation. '
        + 'Useful for specific contexts (Chinese, Japanese, Korean,…)',
    )
    fullName: Optional[str] = Field(
        None, description='Full name flatten (first, middle, and last names)'
    )
    gender: Optional[str] = Field(None, description='Gender')
    generation: Optional[str] = Field(
        None, description='e.g.. Sr, Jr, III (the third),…'
    )
    givenName: Optional[str] = Field(
        None,
        description='First name of the individual'
    )
    legalName: Optional[str] = Field(
        None,
        description='Legal name or birth name (name one has for official '
        + 'purposes)',
    )
    location: Optional[str] = Field(
        None,
        description='Temporary current location od the individual (may be '
        + 'used if the individual has approved its sharing)',
    )
    maritalStatus: Optional[str] = Field(
        None, description='Marital status (married, divorced, widow ...)'
    )
    middleName: Optional[str] = Field(
        None,
        description='Middles name or initial'
    )
    nationality: Optional[str] = Field(
        None,
        description='Nationality'
        )
    placeOfBirth: Optional[str] = Field(
        None,
        description='Reference to the place where the individual was born'
    )
    preferredGivenName: Optional[str] = Field(
        None,
        description='Contains the chosen name by which the individual prefers '
        + 'to be addressed. Note: This name may be a name other than a given '
        + 'name, such as a nickname',
    )
    title: Optional[str] = Field(
        None,
        description='Useful for titles (aristocratic, social,...) Pr, Dr, '
        + 'Sir, ...',
    )
    contactMedium: Optional[List[ContactMedium]] = None
    creditRating: Optional[List[PartyCreditProfile]] = None
    disability: Optional[List[Disability]] = None
    externalReference: Optional[List[ExternalReference]] = None
    individualIdentification: Optional[List[IndividualIdentification]] = None
    languageAbility: Optional[List[LanguageAbility]] = None
    otherName: Optional[List[OtherNameIndividual]] = None
    partyCharacteristic: Optional[List[Characteristic]] = None
    relatedParty: Optional[List[RelatedParty]] = None
    skill: Optional[List[Skill]] = None
    status: Optional[IndividualStateType] = Field(
        None, description='Status of the individual'
    )
    taxExemptionCertificate: Optional[List[TaxExemptionCertificate]] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )


class IndividualCreate(BaseModel):
    aristocraticTitle: Optional[str] = Field(
        None, description='e.g. Baron, Graf, Earl,…'
    )
    birthDate: Optional[datetime] = Field(None, description='Birth date')
    countryOfBirth: Optional[str] = Field(
        None, description='Country where the individual was born'
    )
    deathDate: Optional[datetime] = Field(None, description='Date of death')
    familyName: str = Field(
        ...,
        description='Contains the non-chosen or inherited name. Also known '
        + 'as last name in the Western context',
    )
    familyNamePrefix: Optional[str] = Field(
        None,
        description='Family name prefix'
    )
    formattedName: Optional[str] = Field(
        None,
        description='A fully formatted name in one string with all of its '
        + 'pieces in their proper place and all of the necessary punctuation. '
        + 'Useful for specific contexts (Chinese, Japanese, Korean,…)',
    )
    fullName: Optional[str] = Field(
        None, description='Full name flatten (first, middle, and last names)'
    )
    gender: Optional[str] = Field(None, description='Gender')
    generation: Optional[str] = Field(
        None, description='e.g.. Sr, Jr, III (the third),…'
    )
    givenName: str = Field(..., description='First name of the individual')
    legalName: Optional[str] = Field(
        None,
        description='Legal name or birth name (name one has for official '
        + 'purposes)',
    )
    location: Optional[str] = Field(
        None,
        description='Temporary current location od the individual (may be '
        + 'used if the individual has approved its sharing)',
    )
    maritalStatus: Optional[str] = Field(
        None, description='Marital status (married, divorced, widow ...)'
    )
    middleName: Optional[str] = Field(
        None,
        description='Middles name or initial'
    )
    nationality: Optional[str] = Field(None, description='Nationality')
    placeOfBirth: Optional[str] = Field(
        None,
        description='Reference to the place where the individual was born'
    )
    preferredGivenName: Optional[str] = Field(
        None,
        description='Contains the chosen name by which the individual '
        + 'prefers to be addressed. Note: This name may be a name other than '
        + 'a given name, such as a nickname',
    )
    title: Optional[str] = Field(
        None,
        description='Useful for titles (aristocratic, social,...) Pr, Dr, '
        + 'Sir, ...',
    )
    contactMedium: Optional[List[ContactMedium]] = None
    creditRating: Optional[List[PartyCreditProfile]] = None
    disability: Optional[List[Disability]] = None
    externalReference: Optional[List[ExternalReference]] = None
    individualIdentification: Optional[List[IndividualIdentification]] = None
    languageAbility: Optional[List[LanguageAbility]] = None
    otherName: Optional[List[OtherNameIndividual]] = None
    partyCharacteristic: Optional[List[Characteristic]] = None
    relatedParty: Optional[List[RelatedParty]] = None
    skill: Optional[List[Skill]] = None
    status: Optional[IndividualStateType] = Field(
        None, description='Status of the individual'
    )
    taxExemptionCertificate: Optional[List[TaxExemptionCertificate]] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )


class IndividualUpdate(BaseModel):
    aristocraticTitle: Optional[str] = Field(
        None, description='e.g. Baron, Graf, Earl,…'
    )
    birthDate: Optional[datetime] = Field(None, description='Birth date')
    countryOfBirth: Optional[str] = Field(
        None, description='Country where the individual was born'
    )
    deathDate: Optional[datetime] = Field(None, description='Date of death')
    familyName: Optional[str] = Field(
        None,
        description='Contains the non-chosen or inherited name. Also known '
        + 'as last name in the Western context',
    )
    familyNamePrefix: Optional[str] = Field(
        None,
        description='Family name prefix'
        )
    formattedName: Optional[str] = Field(
        None,
        description='A fully formatted name in one string with all of its '
        + 'pieces in their proper place and all of the necessary punctuation. '
        + 'Useful for specific contexts (Chinese, Japanese, Korean,…)',
    )
    fullName: Optional[str] = Field(
        None, description='Full name flatten (first, middle, and last names)'
    )
    gender: Optional[str] = Field(None, description='Gender')
    generation: Optional[str] = Field(
        None, description='e.g.. Sr, Jr, III (the third),…'
    )
    givenName: Optional[str] = Field(
        None,
        description='First name of the individual'
    )
    legalName: Optional[str] = Field(
        None,
        description='Legal name or birth name (name one has for official '
        + 'purposes)',
    )
    location: Optional[str] = Field(
        None,
        description='Temporary current location od the individual (may be '
        + 'used if the individual has approved its sharing)',
    )
    maritalStatus: Optional[str] = Field(
        None, description='Marital status (married, divorced, widow ...)'
    )
    middleName: Optional[str] = Field(
        None,
        description='Middles name or initial'
    )
    nationality: Optional[str] = Field(None, description='Nationality')
    placeOfBirth: Optional[str] = Field(
        None,
        description='Reference to the place where the individual was born'
    )
    preferredGivenName: Optional[str] = Field(
        None,
        description='Contains the chosen name by which the individual prefers '
        + 'to be addressed. Note: This name may be a name other than a given '
        + 'name, such as a nickname',
    )
    title: Optional[str] = Field(
        None,
        description='Useful for titles (aristocratic, social,...) Pr, Dr, '
        + 'Sir, ...',
    )
    contactMedium: Optional[List[ContactMedium]] = None
    creditRating: Optional[List[PartyCreditProfile]] = None
    disability: Optional[List[Disability]] = None
    externalReference: Optional[List[ExternalReference]] = None
    individualIdentification: Optional[List[IndividualIdentification]] = None
    languageAbility: Optional[List[LanguageAbility]] = None
    otherName: Optional[List[OtherNameIndividual]] = None
    partyCharacteristic: Optional[List[Characteristic]] = None
    relatedParty: Optional[List[RelatedParty]] = None
    skill: Optional[List[Skill]] = None
    status: Optional[IndividualStateType] = Field(
        None, description='Status of the individual'
    )
    taxExemptionCertificate: Optional[List[TaxExemptionCertificate]] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )


class Organization(BaseModel):
    id: str = Field(..., description='Unique identifier of the organization')
    href: Optional[str] = Field(
        None, description='Hyperlink to access the organization'
    )
    isHeadOffice: Optional[bool] = Field(
        None,
        description='If value is true, the organization is the head office'
    )
    isLegalEntity: Optional[bool] = Field(
        None,
        description='If value is true, the organization is a legal entity '
        + 'known by a national referential.',
    )
    name: Optional[str] = Field(
        None, description='Organization name (department name for example)'
    )
    nameType: Optional[str] = Field(
        None, description='Type of the name : Co, Inc, Ltd,…'
    )
    organizationType: Optional[str] = Field(
        None, description='Type of Organization (company, department...)'
    )
    tradingName: Optional[str] = Field(
        None, description='Name that the organization (unit) trades under'
    )
    contactMedium: Optional[List[ContactMedium]] = []
    creditRating: Optional[List[PartyCreditProfile]] = []
    existsDuring: Optional[TimePeriod] = None
    externalReference: Optional[List[ExternalReference]] = []
    organizationChildRelationship: Optional[
            List[OrganizationChildRelationship]
        ] = []
    organizationIdentification: Optional[List[OrganizationIdentification]] = []
    organizationParentRelationship: Optional[
        OrganizationParentRelationship
    ] = None
    otherName: Optional[List[OtherNameOrganization]] = []
    partyCharacteristic: Optional[List[Characteristic]] = []
    relatedParty: Optional[List[RelatedParty]] = []
    status: Optional[OrganizationStateType] = Field(
        None, description='Status of the organization'
    )
    taxExemptionCertificate: Optional[List[TaxExemptionCertificate]] = []
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )

    class Config:
        orm_mode = True


class OrganizationCreate(BaseModel):
    isHeadOffice: Optional[bool] = Field(
        None,
        description='If value is true, the organization is the head office'
    )
    isLegalEntity: Optional[bool] = Field(
        None,
        description='If value is true, the organization is a legal entity '
        + 'known by a national referential.',
    )
    name: Optional[str] = Field(
        None, description='Organization name (department name for example)'
    )
    nameType: Optional[str] = Field(
        None, description='Type of the name : Co, Inc, Ltd,…'
    )
    organizationType: Optional[str] = Field(
        None, description='Type of Organization (company, department...)'
    )
    tradingName: str = Field(
        ..., description='Name that the organization (unit) trades under'
    )
    contactMedium: Optional[List[ContactMedium]] = None
    creditRating: Optional[List[PartyCreditProfile]] = None
    existsDuring: Optional[TimePeriod] = None
    externalReference: Optional[List[ExternalReference]] = None
    organizationChildRelationship: Optional[List[
        OrganizationChildRelationship
    ]] = None
    organizationIdentification: Optional[List[
        OrganizationIdentification
    ]] = None
    organizationParentRelationship: Optional[
        OrganizationParentRelationship
    ] = None
    otherName: Optional[List[OtherNameOrganization]] = None
    partyCharacteristic: Optional[List[Characteristic]] = None
    relatedParty: Optional[List[RelatedParty]] = None
    status: Optional[OrganizationStateType] = Field(
        None, description='Status of the organization'
    )
    taxExemptionCertificate: Optional[List[TaxExemptionCertificate]] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )

    class Config:
        orm_mode = True


class OrganizationUpdate(BaseModel):
    isHeadOffice: Optional[bool] = Field(
        None,
        description='If value is true, the organization is the head office'
    )
    isLegalEntity: Optional[bool] = Field(
        None,
        description='If value is true, the organization is a legal entity '
        + 'known by a national referential.',
    )
    name: Optional[str] = Field(
        None, description='Organization name (department name for example)'
    )
    nameType: Optional[str] = Field(
        None, description='Type of the name : Co, Inc, Ltd,…'
    )
    organizationType: Optional[str] = Field(
        None, description='Type of Organization (company, department...)'
    )
    tradingName: Optional[str] = Field(
        None, description='Name that the organization (unit) trades under'
    )
    contactMedium: Optional[List[ContactMedium]] = None
    creditRating: Optional[List[PartyCreditProfile]] = None
    existsDuring: Optional[TimePeriod] = None
    externalReference: Optional[List[ExternalReference]] = None
    organizationChildRelationship: Optional[
        List[OrganizationChildRelationship]
    ] = None
    organizationIdentification: Optional[
        List[OrganizationIdentification]
    ] = None
    organizationParentRelationship: Optional[
        OrganizationParentRelationship
    ] = None
    otherName: Optional[List[OtherNameOrganization]] = None
    partyCharacteristic: Optional[List[Characteristic]] = None
    relatedParty: Optional[List[RelatedParty]] = None
    status: Optional[OrganizationStateType] = Field(
        None, description='Status of the organization'
    )
    taxExemptionCertificate: Optional[List[TaxExemptionCertificate]] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )


class Party(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Unique identifier of the organization'
    )
    href: Optional[str] = Field(
        None, description='Hyperlink to access the organization'
    )
    contactMedium: Optional[List[ContactMedium]] = None
    creditRating: Optional[List[PartyCreditProfile]] = None
    externalReference: Optional[List[ExternalReference]] = None
    partyCharacteristic: Optional[List[Characteristic]] = None
    relatedParty: Optional[List[RelatedParty]] = None
    taxExemptionCertificate: Optional[List[TaxExemptionCertificate]] = None
    _baseType: Optional[str] = Field(
        None,
        alias='@baseType',
        description='When sub-classing, this defines the super-class',
    )
    _schemaLocation: Optional[AnyUrl] = Field(
        None,
        alias='@schemaLocation',
        description='A URI to a JSON-Schema file that defines additional '
        + 'attributes and relationships',
    )
    _type: Optional[str] = Field(
        None,
        alias='@type',
        description='When sub-classing, this defines the sub-class entity name'
    )


class OrganizationCreateEventPayload(BaseModel):
    organization: Optional[Organization] = Field(
        None, description='The involved resource data for the event'
    )


class OrganizationAttributeValueChangeEventPayload(BaseModel):
    organization: Optional[Organization] = Field(
        None, description='The involved resource data for the event'
    )


class OrganizationStateChangeEventPayload(BaseModel):
    organization: Optional[Organization] = Field(
        None, description='The involved resource data for the event'
    )


class OrganizationDeleteEventPayload(BaseModel):
    organization: Optional[Organization] = Field(
        None, description='The involved resource data for the event'
    )


class IndividualCreateEventPayload(BaseModel):
    individual: Optional[Individual] = Field(
        None, description='The involved resource data for the event'
    )


class IndividualAttributeValueChangeEventPayload(BaseModel):
    individual: Optional[Individual] = Field(
        None, description='The involved resource data for the event'
    )


class IndividualStateChangeEventPayload(BaseModel):
    individual: Optional[Individual] = Field(
        None, description='The involved resource data for the event'
    )


class IndividualDeleteEventPayload(BaseModel):
    individual: Optional[Individual] = Field(
        None, description='The involved resource data for the event'
    )


class OrganizationCreateEvent(BaseModel):
    eventId: Optional[str] = Field(
        None, description='The identifier of the notification.'
    )
    eventTime: Optional[datetime] = Field(
        None, description='Time of the event occurrence.'
    )
    description: Optional[str] = Field(
        None,
        description='An explnatory of the event.')
    timeOcurred: Optional[datetime] = Field(
        None, description='The time the event occured.'
    )
    title: Optional[str] = Field(
        None,
        description='The title of the event.'
    )
    eventType: Optional[str] = Field(
        None,
        description='The type of the notification.'
    )
    domain: Optional[str] = Field(
        None,
        description='The domain of the event.'
    )
    priority: Optional[str] = Field(
        None,
        description='A priority.'
    )
    href: Optional[str] = Field(
        None,
        description='Reference of the ProcessFlow'
    )
    id: Optional[str] = Field(
        None,
        description='Identifier of the Process flow'
    )
    correlationId: Optional[str] = Field(
        None, description='The correlation id for this event.'
    )
    event: Optional[OrganizationCreateEventPayload] = Field(
        None,
        description='The event payload linked to the involved resource object'
    )


class OrganizationAttributeValueChangeEvent(BaseModel):
    eventId: Optional[str] = Field(
        None, description='The identifier of the notification.'
    )
    fieldPath: Optional[str] = Field(
        None,
        description='The path identifying the object field concerned by '
        + 'this notification.',
    )
    eventTime: Optional[datetime] = Field(
        None, description='Time of the event occurrence.'
    )
    description: Optional[str] = Field(
        None,
        description='An explnatory of the event.'
    )
    timeOcurred: Optional[datetime] = Field(
        None, description='The time the event occured.'
    )
    title: Optional[str] = Field(None, description='The title of the event.')
    eventType: Optional[str] = Field(
        None,
        description='The type of the notification.'
    )
    domain: Optional[str] = Field(None, description='The domain of the event.')
    priority: Optional[str] = Field(None, description='A priority.')
    correlationId: Optional[str] = Field(
        None, description='The correlation id for this event.'
    )
    event: Optional[OrganizationAttributeValueChangeEventPayload] = Field(
        None,
        description='The event payload linked to the involved resource object'
    )


class OrganizationStateChangeEvent(BaseModel):
    eventId: Optional[str] = Field(
        None, description='The identifier of the notification.'
    )
    eventTime: Optional[datetime] = Field(
        None, description='Time of the event occurrence.'
    )
    description: Optional[str] = Field(
        None,
        description='An explnatory of the event.'
    )
    timeOcurred: Optional[datetime] = Field(
        None, description='The time the event occured.'
    )
    title: Optional[str] = Field(None, description='The title of the event.')
    eventType: Optional[str] = Field(
        None,
        description='The type of the notification.'
    )
    domain: Optional[str] = Field(None, description='The domain of the event.')
    priority: Optional[str] = Field(None, description='A priority.')
    href: Optional[str] = Field(
        None,
        description='Reference of the ProcessFlow'
    )
    id: Optional[str] = Field(
        None,
        description='Identifier of the Process flow'
    )
    correlationId: Optional[str] = Field(
        None, description='The correlation id for this event.'
    )
    event: Optional[OrganizationStateChangeEventPayload] = Field(
        None,
        description='The event payload linked to the involved resource object'
    )


class OrganizationDeleteEvent(BaseModel):
    eventId: Optional[str] = Field(
        None, description='The identifier of the notification.'
    )
    eventTime: Optional[datetime] = Field(
        None, description='Time of the event occurrence.'
    )
    description: Optional[str] = Field(
        None,
        description='An explnatory of the event.'
    )
    timeOcurred: Optional[datetime] = Field(
        None, description='The time the event occured.'
    )
    title: Optional[str] = Field(None, description='The title of the event.')
    eventType: Optional[str] = Field(
        None,
        description='The type of the notification.'
    )
    domain: Optional[str] = Field(None, description='The domain of the event.')
    priority: Optional[str] = Field(None, description='A priority.')
    href: Optional[str] = Field(
        None,
        description='Reference of the ProcessFlow'
    )
    id: Optional[str] = Field(
        None,
        description='Identifier of the Process flow'
    )
    correlationId: Optional[str] = Field(
        None, description='The correlation id for this event.'
    )
    event: Optional[OrganizationDeleteEventPayload] = Field(
        None,
        description='The event payload linked to the involved resource object'
    )


class IndividualCreateEvent(BaseModel):
    eventId: Optional[str] = Field(
        None, description='The identifier of the notification.'
    )
    eventTime: Optional[datetime] = Field(
        None, description='Time of the event occurrence.'
    )
    description: Optional[str] = Field(
        None,
        description='An explnatory of the event.'
    )
    timeOcurred: Optional[datetime] = Field(
        None, description='The time the event occured.'
    )
    title: Optional[str] = Field(None, description='The title of the event.')
    eventType: Optional[str] = Field(
        None,
        description='The type of the notification.'
    )
    domain: Optional[str] = Field(None, description='The domain of the event.')
    priority: Optional[str] = Field(None, description='A priority.')
    href: Optional[str] = Field(
        None,
        description='Reference of the ProcessFlow'
    )
    id: Optional[str] = Field(
        None,
        description='Identifier of the Process flow'
    )
    correlationId: Optional[str] = Field(
        None, description='The correlation id for this event.'
    )
    event: Optional[IndividualCreateEventPayload] = Field(
        None,
        description='The event payload linked to the involved resource object'
    )


class IndividualAttributeValueChangeEvent(BaseModel):
    eventId: Optional[str] = Field(
        None, description='The identifier of the notification.'
    )
    fieldPath: Optional[str] = Field(
        None,
        description='The path identifying the object field concerned by this '
        + 'notification.',
    )
    eventTime: Optional[datetime] = Field(
        None, description='Time of the event occurrence.'
    )
    description: Optional[str] = Field(
        None,
        description='An explnatory of the event.'
    )
    timeOcurred: Optional[datetime] = Field(
        None, description='The time the event occured.'
    )
    title: Optional[str] = Field(None, description='The title of the event.')
    eventType: Optional[str] = Field(
        None,
        description='The type of the notification.'
    )
    domain: Optional[str] = Field(None, description='The domain of the event.')
    priority: Optional[str] = Field(None, description='A priority.')
    correlationId: Optional[str] = Field(
        None, description='The correlation id for this event.'
    )
    event: Optional[IndividualAttributeValueChangeEventPayload] = Field(
        None,
        description='The event payload linked to the involved resource object'
    )


class IndividualStateChangeEvent(BaseModel):
    eventId: Optional[str] = Field(
        None, description='The identifier of the notification.'
    )
    eventTime: Optional[datetime] = Field(
        None, description='Time of the event occurrence.'
    )
    description: Optional[str] = Field(
        None,
        description='An explnatory of the event.'
    )
    timeOcurred: Optional[datetime] = Field(
        None, description='The time the event occured.'
    )
    title: Optional[str] = Field(None, description='The title of the event.')
    eventType: Optional[str] = Field(
        None,
        description='The type of the notification.'
    )
    domain: Optional[str] = Field(None, description='The domain of the event.')
    priority: Optional[str] = Field(None, description='A priority.')
    href: Optional[str] = Field(
        None,
        description='Reference of the ProcessFlow'
    )
    id: Optional[str] = Field(
        None,
        description='Identifier of the Process flow'
    )
    correlationId: Optional[str] = Field(
        None, description='The correlation id for this event.'
    )
    event: Optional[IndividualStateChangeEventPayload] = Field(
        None,
        description='The event payload linked to the involved resource object'
    )


class IndividualDeleteEvent(BaseModel):
    eventId: Optional[str] = Field(
        None, description='The identifier of the notification.'
    )
    eventTime: Optional[datetime] = Field(
        None, description='Time of the event occurrence.'
    )
    description: Optional[str] = Field(
        None,
        description='An explnatory of the event.'
    )
    timeOcurred: Optional[datetime] = Field(
        None, description='The time the event occured.'
    )
    title: Optional[str] = Field(None, description='The title of the event.')
    eventType: Optional[str] = Field(
        None,
        description='The type of the notification.'
    )
    domain: Optional[str] = Field(None, description='The domain of the event.')
    priority: Optional[str] = Field(None, description='A priority.')
    href: Optional[str] = Field(
        None,
        description='Reference of the ProcessFlow'
    )
    id: Optional[str] = Field(
        None,
        description='Identifier of the Process flow'
    )
    correlationId: Optional[str] = Field(
        None, description='The correlation id for this event.'
    )
    event: Optional[IndividualDeleteEventPayload] = Field(
        None,
        description='The event payload linked to the involved resource object'
    )
